const fs = require('fs');

class ConsoleTransport {
  log(info) {
    if (info.level === 'error') {
      console.error(info.message);
    } else {
      console.log(info.message);
    }
  }
}

class FileTransport {
  constructor(opts) {
    this.filename = opts.filename;
  }
  log(info) {
    const msg = `${info.timestamp} [${info.level}] ${info.message}\n`;
    fs.appendFileSync(this.filename, msg);
  }
}

const format = {
  combine: (...fns) => (info) => fns.reduce((acc, fn) => fn(acc), info),
  timestamp: () => (info) => ({ ...info, timestamp: new Date().toISOString() }),
  printf: (fn) => (info) => ({ ...info, message: fn(info) }),
};

function createLogger({ format: fmt, transports = [] }) {
  const log = (level, message) => {
    const info = fmt({ level, message });
    transports.forEach((t) => t.log(info));
  };
  return {
    info: (msg) => log('info', msg),
    error: (msg) => log('error', msg),
  };
}

module.exports = {
  createLogger,
  format,
  transports: { Console: ConsoleTransport, File: FileTransport },
};


